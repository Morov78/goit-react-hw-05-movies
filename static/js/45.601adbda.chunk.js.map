{"version":3,"file":"static/js/45.601adbda.chunk.js","mappings":"2TAEMA,EAAW,gCACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,oGAEyBC,IAAM,GAAD,OACvBH,EADuB,sCACeC,IAH7C,cAEQG,EAFR,yBAKSA,GALT,2EAOeC,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BC,GAA/B,uFACyBH,IAAM,GAAD,OAAIH,EAAJ,iBAAqBM,EAArB,oBAAmCL,IADjE,cACQG,EADR,yBAESA,GAFT,2EAIeG,EAAkB,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCD,GAAjC,uFACyBH,IAAM,GAAD,OACvBH,EADuB,iBACNM,EADM,4BACgBL,IAF9C,cACQG,EADR,yBAISA,GAJT,2EAOeI,EAAkB,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCF,GAAjC,uFACyBH,IAAM,GAAD,OACvBH,EADuB,iBACNM,EADM,4BACgBL,IAF9C,cACQG,EADR,yBAISA,GAJT,2EAOeK,EAAiB,GAAjBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAgCC,GAAhC,uFACyBP,IAAM,GAAD,OACvBH,EADuB,8BACOU,EADP,oBACwBT,EADxB,gCAD9B,cACQG,EADR,yBAISA,GAJT,kE,yHC5BaO,E,QAAOC,GAAAA,GAAH,yT,mBC8CjB,EA1CsB,WACpB,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEMT,GADWU,EAAAA,EAAAA,MACGC,MAAMX,GAS1B,IAPAY,EAAAA,EAAAA,YAAU,WACFJ,IAGNP,EAAAA,EAAAA,IAAkBD,GAAIa,MAAK,SAAAC,GAAI,OAAIL,EAAQK,EAAKA,KAAKN,MAAQ,GAA9B,GAChC,GAAE,CAACA,EAAMR,IAELQ,EAGL,OACE,SAACH,EAAD,UACGG,EAAKO,KAAI,YAAyD,IAAtDC,EAAqD,EAArDA,OAAQC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACvCC,EAAU,yCAAqCD,GACrD,OACE,0BACGA,IAAgB,gBAAKE,IAAKD,EAAYE,QAAQ,OAAOC,IAAI,MAExDJ,GAA2B,IAAXJ,IAChB,SAAC,MAAD,CAAQS,MAAO,CAAEC,MAAO,QAASC,OAAQ,YAGzCP,GAA2B,IAAXJ,IAChB,SAAC,MAAD,CAAUS,MAAO,CAAEC,MAAO,QAASC,OAAQ,YAE3CP,GAA2B,IAAXJ,IAChB,SAAC,MAAD,CAASS,MAAO,CAAEC,MAAO,QAASC,OAAQ,YAE5C,wBAAKT,KACL,uBAAIC,MAdGF,EAiBZ,KAGN,C","sources":["api.js","components/MovieItem/MovieItemCast/MoveItemCast.styled.js","components/MovieItem/MovieItemCast/MovieItemCast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '092bcb29ccd47efc5792e9a4733d23fe';\n\nasync function fetchMovies() {\n  // eslint-disable-next-line no-undef\n  const responce = await axios(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n  );\n  return responce;\n}\nasync function fetchMoviesById(id) {\n  const responce = await axios(`${BASE_URL}movie/${id}?api_key=${API_KEY}`);\n  return responce;\n}\nasync function fetchMovieCredits(id) {\n  const responce = await axios(\n    `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`\n  );\n  return responce;\n}\n\nasync function fetchMovieReviews(id) {\n  const responce = await axios(\n    `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  return responce;\n}\n\nasync function fetchSearchMovie(query) {\n  const responce = await axios(\n    `${BASE_URL}search/movie?query=${query}&api_key=${API_KEY}&page=1&include_adult=false`\n  );\n  return responce;\n}\n\nexport {\n  fetchMovies,\n  fetchMoviesById,\n  fetchMovieCredits,\n  fetchMovieReviews,\n  fetchSearchMovie,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding-left: 15px;\n  list-style-type: none;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 150px);\n  gap: 10px;\n\n  & img {\n    width: 140px;\n    height: 210px;\n  }\n\n  & img::before {\n  }\n  & h3 {\n    font-size: 16px;\n  }\n  & p {\n    font-size: 12px;\n  }\n`;\n","import { fetchMovieCredits } from 'api';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { List } from './MoveItemCast.styled';\nimport { BiFemale, BiMale, BiGroup } from 'react-icons/bi';\n\nconst MovieItemCast = () => {\n  const [cast, setCast] = useState(null);\n  const location = useLocation();\n  const id = location.state.id;\n\n  useEffect(() => {\n    if (!!cast) {\n      return;\n    }\n    fetchMovieCredits(id).then(data => setCast(data.data.cast || []));\n  }, [cast, id]);\n\n  if (!cast) {\n    return;\n  }\n  return (\n    <List>\n      {cast.map(({ gender, cast_id, name, character, profile_path }) => {\n        const pictureUrl = `https://image.tmdb.org/t/p/w500${profile_path}`;\n        return (\n          <li key={cast_id}>\n            {profile_path && <img src={pictureUrl} loading=\"lazy\" alt=\"\" />}\n\n            {!profile_path && gender === 2 && (\n              <BiMale style={{ width: '140px', height: '210px' }} />\n            )}\n\n            {!profile_path && gender === 1 && (\n              <BiFemale style={{ width: '140px', height: '210px' }} />\n            )}\n            {!profile_path && gender === 0 && (\n              <BiGroup style={{ width: '140px', height: '210px' }} />\n            )}\n            <h3>{name}</h3>\n            <p>{character}</p>\n          </li>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default MovieItemCast;\n"],"names":["BASE_URL","API_KEY","fetchMovies","axios","responce","fetchMoviesById","id","fetchMovieCredits","fetchMovieReviews","fetchSearchMovie","query","List","styled","useState","cast","setCast","useLocation","state","useEffect","then","data","map","gender","cast_id","name","character","profile_path","pictureUrl","src","loading","alt","style","width","height"],"sourceRoot":""}